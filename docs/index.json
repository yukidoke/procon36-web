
[{"content":" 大きな反省、少しの後悔 大橋川から はじめに # こんなところまで見に来てくださってありがとうございます。yukidokeと申します。 第36回高専プロコン 競技部門に群馬チームとして参加させていただきました。\nここでは、細かな裏話などを記そうと思います。 参加記と内容の重複を含む場合があります。 短い文章ではございますがぜひお付き合いください。\nyukidoke/procon36-nitgc Procon36 競技部門 群馬 C\u0026#43;\u0026#43; 0 0 バグ # ソフトウェア開発にバグはつきものです。\n今回のシステムでは必須のコードだけで約5000行、評価ツールやWeb上での提出システム、使用しなかったソルバーなども合わせれば約9000行になりますから、 ことバグについての話には事欠きません。 この章では、その一部について記します。\n最も焦ったバグを挙げるとするなら、分割時の統合提出処理のバグだろうと思います。\n群馬チームでは、問題サイズ N \u0026gt;= 14 のときは盤面を4つに分割し、それぞれに対しビームサーチを適用するという方針で実装を進めていました。 しかし、最も手数がよいビームサーチを作成した人と、分割方式を考案・作成した人が別人であったため、それぞれは統合されないまま開発が進められていました。\nこれには、ある人物が特定のプログラムに特化することで個人が把握すべきコード量が少なく、 また最適化もしやすいというメリットがあったのですが、いかんせんプログラムの統合が遅すぎました。 4月頃からチームメンバーがそれぞれのリポジトリで開発していましたが、 統一のリポジトリができたのは8月の中旬、本格的に使用され始めたのは9月の下旬であったと記憶しています。\n解法の中核部分がそんな有り様ですから、チーム内でConnectと呼ばれていた 問題取得・回答提出・分割盤面の並列計算システムの構想が生まれたのも、10月になろうか というタイミングでした。\nConnect # Connectは主に、各PC・運営サーバとの通信チェック機能、N \u0026lt;= 12 にて複数のソルバーの実行をを各PCに割り振る機能、 N \u0026gt;= 14 にて分割用ソルバーを実行し、分割された盤面を各PCに割り振る機能を持ちます。\n急ピッチで開発が行われたわけですが、Connectは内部サーバ、各PC用Agent、 ソルバーの入出力を受け持つsolverライブラリからなる複雑なシステムです。 分割システム以前に、N \u0026lt;= 12 においても各PCとの通信がうまくいかないという状況でした。\n動作するようになったのは10月7日、本番4日前のことです。 そのため分割システムの完成は10月9日まで遅れ、公式から配布された簡易サーバとの通信テストを行って一応の正常性を担保したつもりでした。\nこの時点で、Connectは未発見の3つのバグを抱えていました。\n排他制御 # １つ目は、排他制御です。\n内部での通信にhttpサーバを使用している関係で、内部サーバへのリクエストは複数のスレッドで処理されます。 そのため、複数スレッドからの同一変数への書き込み、デッドロックは絶対に避けなければなりません。\nしかし、突貫で作成したプログラムの常としてコードは地獄と言って憚られない惨状でした。 これを解消するため、松江に向かう新幹線・特急の中でコードの修正を行いました。\n結果的には、mutexの不適切な仕様によるアクセス競合が1箇所、デッドロックが4箇所程度 発見され、本番1日前に修正されることとなりました。\n操作のオフセット # 2つ目は、操作のオフセットです。\nConnectは分割操作を受け取った後、各分割済み盤面を各PCに割り振ります。 各PC内のソルバーからは分割済み盤面を揃える操作を受け取るわけですが、この操作を 分割前の盤面に適用するためには、分割済み盤面がもとの盤面でどこの盤面であったかをもとに オフセットを適用する必要があります。この処理にバグが潜んでしました。\n操作を内部サーバへ提出する際、オフセットを適用して保存する必要ありますが、 オフセットの適用処理が保存の後に行われていました。\nこれは前述のコードリファクタリング中に発見され、同じく本番1日前に修正されました。 また、このときに最終提出結果をJSONファイルとして出力する機能を追加したことで新たなバグを 発見することになります。\n操作の統合 # 3つ目は、操作の統合です。\n分割済み盤面を揃える操作を受け取った際、その盤面に対する最小の操作を保存しておき、 どこかの分割済み盤面への操作手数が更新されたら、分割操作・分割済み盤面への操作を統合して 運営サーバへ提出するようになっていました。\nしかし、統合処理の際に操作数としてops配列のサイズではなくops自体のサイズを 取得してしまったことで、各操作が1回で合計5回の操作のみとして提出されていたことが発覚しました。\nこれは本戦1日目が終了し、来る巨大な問題を解く最終テストを行っているときに最終提出結果のJSONファイルを 確認したことで発見されました。発見時は流石に肝が冷えました。本戦2日目を棒に振る寸前だったわけですから、 実際の出力を確認することがいかに大事かがわかります。\nまとめ # 以上のことからいくつかの反省点が浮かび上がりました。\nまずは、実装を余裕を持って行うこと。1つ目のバグは時間に余裕がある状態で丁寧に実装を行っていれば 発生する可能性は低かったはずです。 また、スパゲッティコードが2つ、3つ目のバグ発生の間接的な原因となっていることも明らかです。\nつぎに、テストを実装すること。2つ、3つ目のバグはテストを記述していれば事前に十分発見可能でした。\n結果的にいえば本番での実行前にバグは修正され、それを原因とした問題は発生しなかったわけですが、 これはほとんど奇跡に近いものだったと思っています。\nそれはそれとして、簡易サーバはもっと情報を出力してくれても良かったでしょ。 「回答受付が開始されました」とか、「提出された操作」などがコンソールに出ていたら もっと早くバグに気付けたし。べつに減るもんでもないのに。\n技術選定 # システム開発において、技術選定は設計者の好み、思想が出やすい部分だと考えています。 そこでこの章では、群馬チームが作成したプログラムの技術選定について記そうと思います。\n言語 # まずは言語から。\n競技部門では、実行速度を最優先に考える必要がありました。 まともな高級言語で実行速度を優先しようと思うと、候補に上がるのはC++かRustでしょう。\n選ばれたのはC++でした。\nこれはチームメンバーが慣れていたことが最も大きいです。 群馬チームは全員がAtCoderへの参加経験があり、そのコードをC++で書いていました。 この状況でわざわざRustを選ぶ必要はありませんでした。おそらくチームの一人はRustに触れたことがないので、 言語を学ぶことになりますし。\nあとは、C++はRustに比べて無茶しやすいですよね。それがいいことなのかはおいておくとして。\nライブラリ # JSONライブラリにはJSON for modern C++、http通信にはcpp-httplibを使用しましたが、 これにはデファクトスタンダードだという以上の理由はありません。\n並列化ライブラリには、OpenMPとBS::thread_poolの2種類が使用されています。\n私がBS::thread_poolを選んだ理由として、ヘッダオンリーライブラリであったことが挙げられます。\nチームで開発するうえはできるだけライブラリのバージョンを揃えたいです。しかし、チームにGitの操作に 不慣れな人がいたのもあり、git submoduleなどで共通化するのは現実的ではありませんでした。そこで、 共通の開発リポジトリにライブラリ用ディレクトリを作り、gitで管理することで共通化しようとしました。 そう考えたときに、ヘッダオンリーライブラリであるのはとても都合が良いものでした。\nOpenMPはコンパイル時の引数とか、Apple Clangでどうとか、マルチプラットフォームでの統一的な扱いに 難がありますが、ファイル1つならそれも気にしなくて良いです。\nではなぜOpenMPが用いられているのかですが、これもまた統合の遅れによるものです。\n統合時にそれぞれが違う並列化ライブラリを使用していることが発覚しました。 しかし、ライブラリを変更してパフォーマンスのテストを行うのは大変ですし、移行時にどんなバグを埋め込むかわかりません。 また、OpenMPを用いたソルバーは特定のPCでしか実行しないことがわかっていたので、環境の差異も無視できるとして、2つを共存させることにしました。\nGUI # つぎはGUIについて。\nGUIを作成するためのフレームワークとして、Siv3Dを使用しました。 GUI部分は私しか使わないプログラムだったので、完全な好みで決めました。\n素晴らしいですよ、Siv3Dは。\nGUIに高いカスタマイズ性とか、デザイン性とかが あるわけではないですが、それらを求めなければとてもシンプルに記述できます。Qtとかとは雲泥の差です。 そもそも目指すものが違うか。\nもちろんUnityやUWPを持ち出してきても良かったのですが、本番で使用するプログラムのため、 チームで共有しやすいようにC++で記述できるものにしました。\n評価ツール # 本番で使用しないプログラムとしてソルバーの評価ツールがあります。\nこれはRustで記述しました。 基本的にはCLIツールとして提供する都合上オプションを簡単に解析できるClapライブラリが大きいですが、 C++よりRustのほうが好みという理由もあります。\nやっぱり楽しいですよね、Rustは。 「所有権で頭が捻じくれる」と「最高」を行き来する不思議な言語です。\nWebサイト # ほかの本番で使用しないプログラムとして、Webサイトがありました。\nこれには、ソースコードを投げると実行して評価する機能、 ビジュアライザ、選択した問題に対し回答を提出し、スコアを競う機能が実装されています。\nこれらは、フロントエンドがNext.js、バックエンドがNestJS、ともにTypeScriptで開発されています。 ほとんどWebの開発経験がなかったため、ChatGPTに聞いた技術スタックをそのまま使用しています。\n結果、未熟さからuseEffectを使いまくるクソコードが誕生しました。殺してくれ。\nGUI # GUIを導入した理由として、操作の複雑さがあります。\nN \u0026lt;= 12 の場合は手動でも対応可能ではありますが、 分割して各PCに盤面を配布・操作を統合するなどは、何かしらのシステムを使用しなければ対応できません。\nここで問題となるのがIPアドレスです。\n運営サーバのIPアドレスは固定されていますが、 個人用PCのローカルIPアドレスは可変かつ本番でネットワークに接続しなければ確定しません。 この設定を、本番の緊張状態でCLIから行うのは不可能と判断したためGUIを用いました。\n実際には、運営サーバとの接続チェック・各PCへの接続チェック・実行するソルバーの指定・ ソルバーの存在チェック・分割用ソルバーの指定などをIPアドレスが決定した後に行う必要があり、 煩雑な操作となってしまいました。\n群馬チームでは、問題取得・回答提出・タスクの発行用内部サーバとしてSiv3Dを使用しました#procon36 #OpenSiv3D https://t.co/7sV6CFP5mr pic.twitter.com/WaR3aejcL0\n\u0026mdash; ゆきどけ (@yukidoke_winter) October 13, 2025 操作を見ていただければわかりますが、 洗練されているとはいえないUIになっています。異常系の処理も甘いので、やり直せるところと間違ったら1からやり直しというトラップが混在しています。 この出来に納得しているわけではないですが、本番前の1周間で作ったなら及第点かと思います。\nもし競技部門でGUIを作ろうとしている人がいるなら、アドバイスを。 キーボード入力とマウスクリックはできるだけ少ないほうがいいです。本番での不確定要素を増やす必要はありません。 ドラッグアンドドロップは論外です。また、手の震えを考慮してボタンはできるだけ大きい方がいいです。 間違ったボタンを押したときどのような処理になるかも確認しておいたほうが安心です。\n断念した機能 # この章では、断念した機能について記そうと思います。 断念した解法については参加記に書くと思うのでそれ以外で。\nConnect # Connectでは、解くべき問題をタスクとして登録します。\nN \u0026lt;= 12 では問題をそのままタスク0とし、 分割が必要な盤面では左上、右上、左下、右下と順にタスク1、2、3、4と登録します。\n初期構想では、各タスクの必要操作数などによって優先度を設定し、手数が悪い盤面に対して高性能なPCで ビーム幅を増やして実行するという機能を実装する予定でした。\nこれはタスクキューの複雑化と実装時間の 不足から断念することとなりました。これがあれば決勝で解けないという状況には陥っていなかった可能性があり、 後悔は大きいです。\nWebサイト # Webサイトでは、ソルバーの特徴をグラフ化するという構想がありました。\n評価ツールによって同じソルバーを様々なサイズに対して実行し、その実行時間・手数をまとめた ファイルをgzip形式で送りDBに登録してグラフ化し、チームメンバーの解法との比較・ソルバーの 盤面サイズに対する特徴の可視化を行う予定でした。その構想の名残で評価ツールには結果を gzipファイルに出力する機能が残っています。\n実際には比較が必要なほどソルバーの種類が完成せず、その実装時間をソルバーの改善に用いたほうが 良いという判断から開発されませんでしたが、アイデアとしては良かったと思います。\n評価ツール # 評価ツールでは、ビームサーチのパラメータを変えたソルバーに対して テストを実行し、結果を出力する機能を作成する予定でした。\nソルバーの実行には時間がかかるので、 自動化することで生活する間に膨大なパターンを試すという目論見でした。\nこれも実現できればよかったのですが、そも発案から本番までの時間が少なく、フル稼働させても 大した知見にならないことから断念しました。\nパスワードについて # ちなみに、この記事のパスワードとなっているSentaku_Rasen_Syumatsu_yは、 少女終末旅行の各話タイトルになっています。\n第05話「洗濯」\n上層からの雪解け水で洗濯するお話です。私がユーザ名として主に用いているyukidokeから。 第21話「螺旋」\n上層へつながる塔をケッテンクラートで登るお話です。都市基盤すべてを作った古代技術で作られた塔の一部が壊れ、 それを迂回する螺旋状の道を通ります。この迂回路を完成させるために何人が犠牲になったかわからないような道ですが、 それを気にせず、また後から通るかもしれない人を気にせず、道を破壊しながら進んでいきます(気にする余裕がないという理由もある)。 その後、生きることを螺旋に例えるわけですが、その螺旋を破壊して来たことを気にせず、また気にする必要もないというところに 終末世界特有の、無責任への許容というか、社会規範からの解放、あるいは優しさを感じる、お気に入りのエピソードです。 第47話「終末」\n少女終末旅行の最終話です。それまでの話の集大成というか、キャラクターの思い出や、各話の哲学的な問に対して考えた答えを もとに解釈を広げるような、素敵な最終話です。 おわりに # ここまでお付き合いいただき、ありがとうございます。\nこんなチラシの裏のような内容を読ませてしまって申し訳ありません。 もっと役に立つ、高尚な内容の文章をかければよかったのですが この程度が限界のようです。参加記に書かないことを 雑に書く、というコンセプトで書き始めたので、想定通りではあると思います。\n今年の時点で5年生であり、専攻科への進学予定もないため、留年・休学がなければ プロコンへ出場できる最後の年であったということになります。\n決勝で最下位という、ラストイヤーとしては不甲斐ないような、 貶してしまうには決勝へ行けなかったチームに失礼なような中途半端な順位となりました。\nしかし、こうして振り返ってみると、ええ、楽しかったと思います。\n長期に渡るチーム開発や、他人のコードとのマージ、思考の共有や 解法の良し悪しのの討論など、 思い出として語るには早すぎますが、悪くないプロコンでした。\n最後になりますが、半年以上の間ともに開発したチームメンバー、宿や移動方法など プログラム以外の殆どを受け持っていただいた指導教員、練習のためにサーバを用意してくれた 電算部の部員や、ラバーダックデバッグに付き合ってくれた宮舞モカなど、様々な人への 感謝を持って締めさせていただきたいと思います。\n本当にありがとうございました。\nこの文章に名刺の裏程度の価値があることを願って。\n","date":"2025 10月 16","externalUrl":null,"permalink":"/","section":"#ifdef DEBUG","summary":"","title":"#ifdef DEBUG","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]